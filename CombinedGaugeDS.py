#    "$Name:  $";
#    "$Header:  $";
#=============================================================================
#
# file :        CombinedGaugeDS.py
#
# description : Python source for the CombinedGaugeDS and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#                CombinedGaugeDS are implemented in this file.
#
# project :     TANGO Device Server
#
# $Author:  srubio@cells.es
#
# $Revision:  $
#
# $Log:  $
#
# copyleft :    European Synchrotron Radiation Facility
#               BP 220, Grenoble 38043
#               FRANCE
#
#=============================================================================
#          This file is generated by POGO
#    (Program Obviously used to Generate tango Object)
#
#         (c) - Software Engineering Group - ESRF
#=============================================================================
#


import PyTango
import sys
from combined_gauge import CombinedGauge

#==================================================================
#   CombinedGaugeDS Class Description:
#
#         The CombinedGauge Device Server has been developed to communicate by serial line with MKS devices that combine Pirani and Cold Cathode in a single sensor.
#         The device server has been developed at ALBA, http://www.tango-controls.org/device-servers/alba
#
#==================================================================

class CombinedGaugeDS(PyTango.Device_4Impl):

#--------- Add you global variables here --------------------------
    
    def clean_msg(self,msg):
        return msg.split('ACK')[-1].split(';')[0]
    
    def str2double(self,msg):
        return float(self.clean_msg(msg))

#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        CombinedGaugeDS.init_device(self)

#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        print "[Device delete_device method] for device",self.get_name()


#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        print "In ", self.get_name(), "::init_device()"
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        self.gauge = CombinedGauge(self.SerialLine)

#------------------------------------------------------------------
#    Always excuted hook method
#------------------------------------------------------------------
    def always_executed_hook(self):
        print "In ", self.get_name(), "::always_excuted_hook()"
        try: 
            msg = self.gauge.read_pressure()
            if 'ACK' in msg: self.set_state(PyTango.DevState.ON)
            self.set_status('Gauge active: %s'%msg)
        except:
            if msg: 
                self.set_state(PyTango.DevState.FAULT)
                self.set_status('Gauge returned error: %s'%msg)
            else: 
                self.set_state(PyTango.DevState.UNKNOWN)
                self.set_status('Gauge didnt answer')
        pass

#==================================================================
#
#    CombinedGaugeDS read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        print "In ", self.get_name(), "::read_attr_hardware()"



#------------------------------------------------------------------
#    Read Pressure attribute
#------------------------------------------------------------------
    def read_Pressure(self, attr):
        print "In ", self.get_name(), "::read_Pressure()"
        
        #    Add your own code here
        
        attr_Pressure_read = self.str2double(self.gauge.read_pressure(channel=self.Channel) or '1.')
        attr.set_value(attr_Pressure_read)


#------------------------------------------------------------------
#    Read Setpoint attribute
#------------------------------------------------------------------
    def read_Setpoint(self, attr):
        print "In ", self.get_name(), "::read_Setpoint()"
        
        #    Add your own code here
        
        attr_Setpoint_read = self.str2double(self.gauge.check_setpoint(n=1) or '0')
        attr.set_value(attr_Setpoint_read)


#------------------------------------------------------------------
#    Write Setpoint attribute
#------------------------------------------------------------------
    def write_Setpoint(self, attr):
        print "In ", self.get_name(), "::write_Setpoint()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.gauge.check_setpoint(n=1,setpoint=data[0],direction='BELOW',enable=bool(data[0]))

#------------------------------------------------------------------
#    Read Calibration attribute
#------------------------------------------------------------------
    def read_Calibration(self, attr):
        print "In ", self.get_name(), "::read_Calibration()"
        
        #    Add your own code here
        
        attr_Calibration_read = self.clean_msg(self.gauge.check_calibration())
        attr.set_value(attr_Calibration_read)


#------------------------------------------------------------------
#    Write Calibration attribute
#------------------------------------------------------------------
    def write_Calibration(self, attr):
        print "In ", self.get_name(), "::write_Calibration()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.gauge.check_calibration(data[0])

#------------------------------------------------------------------
#    Read Unit attribute
#------------------------------------------------------------------
    def read_Unit(self, attr):
        print "In ", self.get_name(), "::read_Unit()"
        
        #    Add your own code here
        
        attr_Unit_read = self.clean_msg(self.gauge.check_unit())
        attr.set_value(attr_Unit_read)


#------------------------------------------------------------------
#    Write Unit attribute
#------------------------------------------------------------------
    def write_Unit(self, attr):
        print "In ", self.get_name(), "::write_Unit()"
        data=[]
        attr.get_write_value(data)
        print "Attribute value = ", data

        #    Add your own code here
        self.gauge.check_unit(data[0])


#==================================================================
#
#    CombinedGaugeDS command methods
#
#==================================================================

#------------------------------------------------------------------
#    ReadChannel command:
#
#    Description: 
#    argin:  DevLong    
#    argout: DevDouble    
#------------------------------------------------------------------
    def ReadChannel(self, argin):
        print "In ", self.get_name(), "::ReadChannel()"
        #    Add your own code here
        argout = self.gauge.read_pressure(argin)
        return argout


#------------------------------------------------------------------
#    Talk command:
#
#    Description: 
#    argin:  DevString    
#    argout: DevString    
#------------------------------------------------------------------
    def Talk(self, argin):
        print "In ", self.get_name(), "::Talk()"
        #    Add your own code here
        argout = self.gauge.read_param(argin)
        return argout


#==================================================================
#
#    CombinedGaugeDSClass class definition
#
#==================================================================
class CombinedGaugeDSClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'SerialLine':
            [PyTango.DevString,
            "",
            [] ],
        'Channel':
            [PyTango.DevLong,
            "",
            [ 3 ] ],
        }


    #    Command definitions
    cmd_list = {
        'ReadChannel':
            [[PyTango.DevLong, ""],
            [PyTango.DevString, ""]],
        'Talk':
            [[PyTango.DevString, ""],
            [PyTango.DevString, ""]],
        }


    #    Attribute definitions
    attr_list = {
        'Pressure':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ]],
        'Setpoint':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Calibration':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        'Unit':
            [[PyTango.DevString,
            PyTango.SCALAR,
            PyTango.READ_WRITE]],
        }


#------------------------------------------------------------------
#    CombinedGaugeDSClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In CombinedGaugeDSClass  constructor"

#==================================================================
#
#    CombinedGaugeDS class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(CombinedGaugeDSClass,CombinedGaugeDS,'CombinedGaugeDS')

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
